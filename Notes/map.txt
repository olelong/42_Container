------------------------ MAP -------------------------

Map est un ensemble de conteneur qui vont stocker les elements formes
par une combinaison entre une cle et une valeur.

La cle permet de trier et d'identifier les elements.
Les types peuvent etre different entre une cle et sa valeur.
On creer une paire.



Arbre binaire simple sans tri et equilibre:
exemple :

				42
			  /    \
            40      45
			/\	   /  \
		  38 41   43   47
		  /		   \     \
		37		   44	 49
						/  \
					   48   55

Ici, 42 est le root. 41 est son child de gauche car il est plus petit et 45 son child droit.
42 est donc le parent de 41 et 45.

Si on supprime 40, 38 va seulement prendre la place de 40.
Si on supprime 49, c'est 48 qui prend sa place.
Si on supprime 48, il ne se passe rien de special.
Si on supprime 42, 41 va etre celui qui remontera et prendra la place de 42.
Si on veut ajouter par exemple 44, il arrivera en tant que child droit de 43.

erase(): exemples
43 : only right child
41 : no child
38 : only left child
45 : Both child : pas de relink juste a la place de 45 se met 44

Child droit : plus grand que parent
Child gauche : plus petit que parent

Dans un arbre binaire ou listes chainees, on peut pas faire d'operateur=() car trop dangereux (par exemple faire des copies beaucoup trop longues sans faire expres en plus)
Du coup on passe par un constructeur de copie et des fonctions annexes.

Red black tree :
Arbre binaire equilibree entre des nodes rouges et noires et suivant des regles strictes.



/****************  Binary tree : AVL  ******************/

(Facteur d’équilibre) Balance factor:	La différence entre 
la hauteur du subtree gauche du facteur - la hauteur du subtree 
droit (height left - height right)

Subtree:	Sous arbre 

Facteur: 	Chaque node a un facteur d’équilibre et il doit être entre -1 et 1 si ce n’est pas le cas l’arbre n’es pas équilibré. 

Exemple d’arbre :

                            (33)
                       /           \
                    (9)           (53)
                  /      \           \
              (8)    (21)           (61)
                         /
                     (11)

Résultat des facteurs d’équilibre de cet arbre : 
                              1
                         /         \
                       -1           -1
                    /     \            \
                   0      1              0
                          /
                         0
33 : height left 3 - height right 2 = 1 
9 : height left 1 - height right 2 = -1
61 : height left 0 - height right 0 = 0 

Height : la plus longue de gauche ou de droite qui se suit 

Rotation subtrees:	La position entre des nodes est interchangées, il existe deux type de rotations : left et right.
Left rotation: 	Les arrangements des noeuds de droite sont transformés en arrangements sur le noeud de gauche.
Right rotation: Contraire de left rotation.
Left-right rotation: left puis right rotation.
Right-left rotation: right puis left rotation.

Exemple de left rotation:

1. Initial tree: 
       P 
      /
     (X)  
    /   \
   A     (Y)
        /   \
       B     Z

2. Si y a un subtree gauche, on assigne x comme parent du subtree gauche de y: 
       P 
      /
     (X)  
    /   \
   A     B     (Y)
                 \
                  Z

3. Si le parent de x est NULL, on met y comme root de l’arbre.
4. Si x est le left child de p, faire de y le left child de p.
5. Sinon assigner y comme right child de p:
     (X)       P
    /   \      \
   A     B     (Y)
                 \
                  Z

6. Faire de y le parent de x:

               P
               \
               (Y)
              /   \
             (X)   Z
            /   \
           A     B

Autres Actions possibles :
Insert/Delete/find

